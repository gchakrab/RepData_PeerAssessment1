data(iris)
?iris
tapply(Sepal.Length, virginica, mean)
tapply(Sepal.Length, Species, mean)["virginica"]
mean(iris[iris$Species == "virginica",]$Sepal.Length)
t <- tapply(x, f, mean) {
x <- data(factors)
f <- Species
}
tapply(iris(Sepal.Length), virginica, mean)
tapply(iris(Sepal.Length), Species == "virginica", mean)
tapply(iris(virginica(Sepal.Length)), mean)
debug
debug()
colmeans
colmeans = apply(1:4, 2, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
mtcars
data(mtcars)
?mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars[mtcars$cyl == "8",]$hp) - mean(mtcars[mtcars$cyl == "4",]$hp)
debug(ls)
ls
library(datasets)
data(iris)
?iris
exit
()
delete()
bye()
incative
?
?browse
q
C
C
bye()
debug
undebug(ls)
?browse
esc
print(Q)
ls
getwd
dir()
library(datasets)
data(iris)
?iris
tapply(iris(Sepal.Length), Species, mean) ["virginica"]
tapply(iris(Sepal.Length, Species), mean) ["virginica"]
tapply(iris(virginica(Sepal.Length)), mean)
tapply(Sepal.Length, Species, mean) ["virginica"]
tapply(Sepal.Length, Species, mean) [Species == "virginica"]
tapply(Sepal.Length, virginica, mean)
tapply(virginica, Sepal.Length, mean)
swirl()
library(swirl)
swirl()
telegram <- function(...){
paste("START", "Good", "morning", "STOP", ...)
}
submit()
telegram <- function(...){
paste(..., "START", "Good", "morning", "STOP")
}
submit()
?function
?function()
?paste
telegram <- function(...){
paste("START", "Good morning", "STOP")
}
submit()
telegram <- function(...){
paste("START", ..., "STOP", sep = " ")
}
submit()
telegram("Good", "morning")
mad_libs <- function(...){
# Do your argument unpacking here!
args <- list(...)
place <- args[["place"]]
adjective <- args[["adjective"]]
noun <- args[["noun"]]
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
submit()
mad_libs(place = "San Francisco", adjective = "enviromentalist", noun = "machine")
"%p%" <- function(left, right){
paste("left", "right", sep = " ")   # Remember to add arguments!
}
submit()
"%p%" <- function(left, right){
paste(left, right, sep = " ")   # Remember to add arguments!
}
submit()
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinvese <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
}
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinvese <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
m <- matrix(c(-1, -2, -3, -4), 2, 2)
x <- makeCacheMatrix(m)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
x <- makeCacheMatrix(m)
x$get()
x$setinverse()
x$getinverse()
inv <- cachesolve(x)
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- inverse(data, ...)
x$setinverse(i)
i
}
i <- cachesolve(x)
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- inverse(data, ...)
x$setinverse(i)
i
}
i <- cacheSolve(x)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- inverse(data, ...)
x$setinverse(i)
i
}
m <- matrix(c(-1, -2, 1, 1), 2, 2)
x <- makeCacheMatrix(m)
x$get()
i <- cacheSolve(x)
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
i <- cacheSolve(x)
i
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
summary(y)
plot(x, y)
library(swril)
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
haed(flag_colors)
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
bye()
library(swrl)
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, unique, character(1))
vapply(flags, class, character(1))
?taply
?tapply
table(flags$landmass)
table(flag$animate)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls(plants)
ls()
class(plants)
dim(plants)
nrow(plants)
nclo(plants)
ncol(plants)
object.size(plants)
names(plnats)
names(plants)
head()
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plnats$Active_Growth_Period)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS()
sample(LETTERS, 26)
LETTERS
sample(LETTERS)
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbiom(1, size = 100, prob = 0.7)
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(c(0, 1), 100, prob = 0.7)
flips2 <- rbinom(100, 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colmeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "october 17, 1986 08:24"
t3 <- character("october 17, 1986 08:24")
t3
infor()
info()
info(store date and time)
info(date and time)
info(date)
nxt()
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
?strptime
class(t4)
sys.time() > t1
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
dim(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$Speed, )
plot(x = cars$Speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "MY Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
mtcars
data(mtcars)
boxplot()
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
fileurl <- https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
library(xlsx)
library(xlsx)
install.packages("xlsxjars")
library(rJava)
library(xlsx)
library(rJava)
library(xlsx)
library(swirl)
ls()
rm(list=ls())
swir()
swirl()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim("mydf")
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
bye()
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
install.packages(RTools)
install.packages(RMySQL, type = "source")
install.packages("RMySQL", type = "source")
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(),user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
warnings()
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query,n=10); dbClearResult(query);
dim(affyMisSmall)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A, "example.h5","foo/A")
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
attr(B, "scale") <- "liter"
h5write(B, "example.h5","foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L,seq(0,1,length.out=5),
c("ab","cde","fghi","a","s"), stringsAsFactors=FALSE)
h5write(df, "example.h5","df")
h5ls("example.h5")
readA = h5read("example.h5","foo/A")
readB = h5read("example.h5","foo/foobaa/B")
readdf= h5read("example.h5","df")
readA
h5write(c(12,13,14),"example.h5","foo/A",index=list(1:3,1))
h5read("example.h5","foo/A")
library(nlme)
library(lattice)
xyplot(weigth ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight)
lines()
lines(x,y,col =2)
lines(Time, weight)
plot <- xyplot(weight ~ Time | Diet, BodyWeight)
class(plot)
panel.lines(plot)
lines(plot)
lpoints(plot)
panel.lmlines()
panel.lmline()
lpoints()
panel.lpoints(plot)
library(datasets)
data(airquality)
library(ggplot2)
str(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
q()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
q()
library(knitr)
setwd("C:/Users/xaravich/Desktop/RepData_PeerAssessment1")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
q()
